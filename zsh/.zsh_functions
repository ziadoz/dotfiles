# @see: https://github.com/sindresorhus/pure/issues/664#issuecomment-2816794108
# @see: https://apple.stackexchange.com/a/478437
function shell_session_save() {
  # Save the current state.
  if [ -n "$SHELL_SESSION_FILE" ]; then
    local save_lock_file="$SHELL_SESSION_DIR/_saving_lockfile"
    if /usr/bin/shlock -f "$save_lock_file" -p $$; then
      echo -ne '\nSaving session...' >&2
      (umask 077; echo 'echo Restored session: "$(/bin/date -r '$(/bin/date +%s)')"' >| "$SHELL_SESSION_FILE")

      # Call user-supplied hook functions to let them save state.
      whence shell_session_save_user_state >/dev/null && shell_session_save_user_state "$SHELL_SESSION_FILE"
      local f
      for f in $shell_session_save_user_state_functions; do
          $f "$SHELL_SESSION_FILE"
      done

      shell_session_history_allowed && shell_session_save_history
      echo 'completed.' >&2
      /bin/rm "$save_lock_file"
    fi
  fi
}

# Extract compressed file based upon its extension
function extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2) tar xvjf $1   ;;
            *.tar.gz)  tar xvzf $1   ;;
            *.bz2)     bunzip2 $1    ;;
            *.rar)     unrar x $1    ;;
            *.gz)      gunzip $1     ;;
            *.tar)     tar xvf $1    ;;
            *.tbz2)    tar xvjf $1   ;;
            *.tgz)     tar xvzf $1   ;;
            *.zip)     unzip $1      ;;
            *.Z)       uncompress $1 ;;
            *.7z)      7z x $1       ;;
            *)         echo "'$1' cannot be extracted via >extract<" ;;
        esac
      else
        echo "'$1' is not a valid file"
    fi
}

# Regenerate MAC address
# @see: http://jezenthomas.com/free-internet-on-trains/
remac() {
    sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -z
    sudo ifconfig en0 ether $(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    sudo networksetup -detectnewhardware
    echo $(ifconfig en0 | grep ether)
}

# Set DNS servers
# @see: http://osxdaily.com/2015/06/02/change-dns-command-line-mac-os-x/
# @see: http://osxdaily.com/2014/09/03/list-all-network-hardware-from-the-command-line-in-os-x/
# @see: https://superuser.com/questions/86184/change-dns-server-from-terminal-or-script-on-mac-os-x
# @see: https://superuser.com/questions/258151/how-do-i-check-what-dns-server-im-using-on-mac-os-x
setdns() {
    local dns_servers="${*:-192.168.0.3 1.1.1.1 1.0.0.1}"
    if [ "$(networksetup -getdnsservers Wi-Fi | tr '\n' ' ' | xargs)" != "$dns_servers" ]; then
        sudo networksetup -setdnsservers Wi-Fi empty
        sudo networksetup -setdnsservers Wi-Fi $dns_servers
        echo "DNS servers set: $(networksetup -getdnsservers Wi-Fi | tr '\n' ' ' | xargs)"
    else
        echo "DNS servers already set: $(networksetup -getdnsservers Wi-Fi | tr '\n' ' ' | xargs)"
    fi
}

# Encrypt and decrypt files quickly
function enc() {
    openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 1000000 -salt -in "$1" -out "$1.enc"
}

function dec() {
    openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 1000000 -in "$1" -out "$(basename $1 .enc)"
}

# Slugify a string
# Usage: echo "Foo Bar" | slugify
# @see: https://duncanlock.net/blog/2021/06/15/good-simple-bash-slugify-function/
# @see: https://gist.github.com/oneohthree/f528c7ae1e701ad990e6
function slugify() {
  iconv -t ascii//TRANSLIT \
    | tr -d "'" \
    | sed -E 's/[^a-zA-Z0-9]+/-/g' \
    | sed -E 's/^-+|-+$//g' \
    | tr "[:upper:]" "[:lower:]"
}

# Convert MKV to MP4 and M4A to MP3 using FFmpeg
# @todo: Need to copy xattrs from one file to the other.
# @see: https://apple.stackexchange.com/questions/226485/copy-extended-attributes-to-new-file-ffmpeg
# @see: https://github.com/ziadoz/media-swapper
# @see: https://askubuntu.com/a/35994
# @see: https://blog.gingerbeardman.com/2024/07/30/taking-command-of-the-context-menu-in-macos/
function mkv2mp4() {
    find "$1" -name '*.mkv' -print -exec bash -c 'ffmpeg -i "$1" -nostats -loglevel 0 -c:v copy -c:a copy -c:s mov_text -movflags +faststart -y "${1%.mkv}.mp4"' _ {} \;
}

function m4a2mp3() {
    find "$1" -name '*.m4a' -print -exec bash -c 'ffmpeg -i "$1" -nostats -loglevel 0 -c:a libmp3lame -q:a 2 -y "${1%.m4a}.mp3"' _ {} \;
}
